import time


class ElementoNoEncontrado(Exception):
    pass


class EspacioNoDisponible(Exception):
    pass


class NombreInvalido(Exception):
    pass


class EntradaInvalida(Exception):
    pass


class Carpeta:
    def __init__(self, nombre):
        self.nombre = nombre
        self.elementos = [None, None, None, None]
        self.simbolo = "📁 "


class Archivo:
    def __init__(self, nombre, extension, peso):
        self.nombre = nombre
        self.extension = extension
        self.peso = peso
        self.simbolo = "📄 "


def buscar(carpeta, nombre):
    if carpeta.nombre == nombre:
        return carpeta
    for elemento in carpeta.elementos:
        if elemento and isinstance(elemento, Carpeta):
            resultado = buscar(elemento, nombre)
            if resultado:
                return resultado
    return None


def agregar_carpeta(carpeta_madre, nombre_nueva_carpeta):
    if not carpeta_madre:
        raise ElementoNoEncontrado("Carpeta madre no encontrada.")
    for elemento in carpeta_madre.elementos:
        if elemento and elemento.nombre == nombre_nueva_carpeta:
            raise NombreInvalido("Ya existe una carpeta con el mismo nombre.")
    for i, elemento in enumerate(carpeta_madre.elementos):
        if not elemento:
            carpeta_madre.elementos[i] = Carpeta(nombre_nueva_carpeta)
            return
    raise EspacioNoDisponible("No hay espacio disponible en la carpeta madre.")


def agregar_archivo(carpeta_madre, nombre_archivo, extension, peso):
    if not carpeta_madre:
        raise ElementoNoEncontrado("Carpeta madre no encontrada.")
    for elemento in carpeta_madre.elementos:
        if elemento and isinstance(elemento, Archivo) and elemento.nombre == nombre_archivo:
            raise NombreInvalido("Ya existe un archivo con el mismo nombre y extensión.")
    for i, elemento in enumerate(carpeta_madre.elementos):
        if not elemento:
            carpeta_madre.elementos[i] = Archivo(nombre_archivo, extension, peso)
            return
    raise EspacioNoDisponible("No hay espacio disponible en la carpeta madre.")


def modificar_carpeta(carpeta_raiz, nombre_actual, nuevo_nombre):
    carpeta = buscar(carpeta_raiz, nombre_actual)
    if not carpeta:
        raise ElementoNoEncontrado("Carpeta no encontrada.")
    carpeta.nombre = nuevo_nombre


def modificar_archivo(carpeta_raiz, nombre_carpeta, nombre_archivo, nueva_extension, nuevo_peso):
    carpeta = buscar(carpeta_raiz, nombre_carpeta)
    if not carpeta:
        raise ElementoNoEncontrado("Carpeta madre no encontrada.")
    archivo_modificado = False
    for elemento in carpeta.elementos:
        if elemento and isinstance(elemento, Archivo) and elemento.nombre == nombre_archivo:
            elemento.extension = nueva_extension
            elemento.peso = nuevo_peso
            archivo_modificado = True
            break
        else:
            raise ElementoNoEncontrado("Archivo no encontrado.")


def imprimir_arbol(carpeta, nivel=0):
    print("  " * nivel + carpeta.nombre + carpeta.simbolo)
    for elemento in carpeta.elementos:
        if elemento:
            if isinstance(elemento, Carpeta):
                imprimir_arbol(elemento, nivel + 1)
            else:
                print("  " * (nivel + 1) + elemento.nombre + "." + "📄 " + elemento.extension + " (" + str(
                    elemento.peso) + ")")

def carpeta_con_mas_carpetas(carpeta):
    max_cant_carpetas = 0
    carpeta_con_max_carpetas = None

    def buscar_carpeta(carpeta_actual):
        nonlocal max_cant_carpetas, carpeta_con_max_carpetas
        cant_carpetas = sum(1 for e in carpeta_actual.elementos if isinstance(e, Carpeta))
        if cant_carpetas > max_cant_carpetas:
            max_cant_carpetas = cant_carpetas
            carpeta_con_max_carpetas = carpeta_actual

        for elemento in carpeta_actual.elementos:
            if isinstance(elemento, Carpeta):
                buscar_carpeta(elemento)

    buscar_carpeta(carpeta)
    return carpeta_con_max_carpetas.nombre if carpeta_con_max_carpetas else None

def ruta_archivo_mas_pesado(carpeta, ruta_actual="raiz", archivo_mas_pesado=None, ruta_archivo_pesado=""):
    for elemento in carpeta.elementos:
        if elemento:
            if isinstance(elemento, Carpeta):
                ruta_actual_temp = ruta_actual + "/" + elemento.nombre
                archivo_mas_pesado, ruta_archivo_pesado = ruta_archivo_mas_pesado(elemento, ruta_actual_temp, archivo_mas_pesado, ruta_archivo_pesado)
            else:
                if not archivo_mas_pesado or elemento.peso > archivo_mas_pesado.peso:
                    archivo_mas_pesado = elemento
                    ruta_archivo_pesado = ruta_actual + "/" + elemento.nombre + "." + elemento.extension
    return archivo_mas_pesado, ruta_archivo_pesado


def main():
    carpeta_raiz = Carpeta("raiz")

    while True:
        print("Por favor, seleccione una opción:", "\n", "1. Agregar carpeta", "\n", "2. Agregar archivo", "\n",
              "3. Modificar carpeta", "\n", "4. Modificar archivo", "\n", "5. Buscar carpeta con más carpetas", "\n", "6. Ruta archivo mas pesado", "\n", "7. Salir")
        opcion = input("Seleccione una opción: ")

        try:
            if opcion == "1":
                nombre_carpeta_madre = input("Ingrese el nombre de la carpeta madre: ")
                nombre_nueva_carpeta = input("Ingrese el nombre de la nueva carpeta: ")
                agregar_carpeta(buscar(carpeta_raiz, nombre_carpeta_madre), nombre_nueva_carpeta)
                print("Carpeta agregada.")

            elif opcion == "2":
                nombre_carpeta_madre = input("Ingrese el nombre de la carpeta madre: ")
                entrada = input("Ingrese el nombre del archivo, extensión y peso (ejemplo: archivo.txt 56): ")
                if len(entrada.split()) != 3:
                    raise EntradaInvalida("Por favor, ingrese el nombre del archivo, extensión y peso correctamente.")
                nombre_archivo, extension, peso = entrada.split()
                peso = int(peso)
                agregar_archivo(buscar(carpeta_raiz, nombre_carpeta_madre), nombre_archivo, extension, peso)
                print("Archivo agregado.")

            elif opcion == "3":
                nombre_actual = input("Ingrese el nombre actual de la carpeta: ")
                nuevo_nombre = input("Ingrese el nuevo nombre de la carpeta: ")
                modificar_carpeta(carpeta_raiz, nombre_actual, nuevo_nombre)
                print("Carpeta modificada.")

            elif opcion == "4":
                nombre_carpeta = input("Ingrese el nombre de la carpeta madre: ")
                nombre_archivo = input("Ingrese el nombre actual del archivo: ")
                nueva_extension = input("Ingrese la nueva extensión del archivo: ")
                nuevo_peso = int(input("Ingrese el nuevo peso del archivo: "))
                modificar_archivo(carpeta_raiz, nombre_carpeta, nombre_archivo, nueva_extension, nuevo_peso)
                print("Archivo modificado.")

            elif opcion == "5":
                carpeta_con_mas_carpetas_resultado = carpeta_con_mas_carpetas(carpeta_raiz)
                if carpeta_con_mas_carpetas_resultado:
                    print("La carpeta con más carpetas es:", carpeta_con_mas_carpetas_resultado)
                else:
                    print("No se encontró ninguna carpeta con carpetas.")
            
            elif opcion == "6":
                archivo_pesado, ruta_pesado = ruta_archivo_mas_pesado(carpeta_raiz)
                print("El archivo más pesado es:", archivo_pesado.nombre + "." + archivo_pesado.extension, "con un peso de", archivo_pesado.peso)
                print("La ruta del archivo más pesado es:", ruta_pesado)

            elif opcion == "7":
                print("Terminando...")
                time.sleep(2)
                break

            else:
                print("Opción no válida.")

        except (ElementoNoEncontrado, EspacioNoDisponible, NombreInvalido, EntradaInvalida) as e:
            print(str(e))

        print("\nÁrbol de carpetas y archivos:")
        imprimir_arbol(carpeta_raiz)



if __name__ == "__main__":
    main()
