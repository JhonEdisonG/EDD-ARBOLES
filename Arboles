import sys


class Node:
    def __init__(self, value):
        self.value = value
        self.children = [None] * 4
        self.is_folder = True


class File:
    def __init__(self, name, extension, size):
        self.name = name
        self.extension = extension
        self.size = size


class Folder:
    def __init__(self, name):
        self.name = name
        self.elements = 0
        self.children = [None] * 4

root_folder = Folder("raiz")

class BinaryTree:
    def __init__(self):
        self.root = root_folder

    def add_folder(self, folder, target: Folder):
        for i in range(4):
            if target.children[i] is None:
                target.children[i] = folder
                break
            elif i == 3:
                print("Carpeta llena")

    def add_file(self, file, target: Folder):
        for i in range(4):
            if target.children[i] is None:
                target.children[i] = file
                break
            elif i == 3:
                print("Carpeta llena")

    def modify_folder(self, old_name, new_name):
      target_folder = None
      for child in self.root.children:
        if child and isinstance(child, Folder) and child.name == old_name:
          target_folder = child
          break

      if target_folder:
        target_folder.name = new_name
        print(f"El nombre de la carpeta '{old_name}' ha sido cambiado a '{new_name}'.")
      else:
        print(f"No se encontró la carpeta con el nombre '{old_name}'.")


    def modify_file(self, old_name, new_name, new_extension, new_size):
      target_file = None
      for child in self.root.children:
        if child and isinstance(child, File) and child.name == old_name:
          target_file = child
          break

      if target_file:
        target_file.name = new_name
        target_file.extension = new_extension
        target_file.size = new_size
        print(f"El archivo '{old_name}' ha sido modificado.")
      else:
        print(f"No se encontró el archivo con el nombre '{old_name}'.")


tree = BinaryTree()

def system():
    print("Bienvenido al sistema de documento y carpetas")
    while True:
        print("Porfavor, seleccione una opcion:", "\n", "1. Agregar carpeta", "2. Agregar archivo", "\n",
      "3. modificar carpeta", "\n", "4. modificar archivo", "\n", "5. Imprimir árbol", "\n", "6. Salir")

        decision = int(input(""))

        if decision == 1:
            folder_name = input("Ingrese el nombre de la carpeta: ")
            new_folder = Folder(folder_name)
            tree.add_folder(new_folder, tree.root)

        elif decision == 2:
            file_name = input("Ingrese el nombre del archivo: ")
            file_extension = input("Ingrese la extension del archivo: ")
            file_size = int(input("Ingrese el tamaño del archivo: "))
            new_file = File(file_name, file_extension, file_size)
            tree.add_file(new_file, tree.root)

        elif decision == 3:
          old_folder_name = input("Ingrese el nombre actual de la carpeta: ")
          new_folder_name = input("Ingrese el nuevo nombre de la carpeta: ")
          tree.modify_folder(old_folder_name, new_folder_name)


        elif decision == 4:
          old_file_name = input("Ingrese el nombre actual del archivo: ")
          new_file_name = input("Ingrese el nuevo nombre del archivo: ")
          new_file_extension = input("Ingrese la nueva extensión del archivo: ")
          new_file_size = int(input("Ingrese el nuevo tamaño del archivo: "))
          tree.modify_file(old_file_name, new_file_name, new_file_extension, new_file_size)

        elif decision == 5:
          print("Estructura del árbol:")
          tree.pretty_print_tree(tree.root, is_folder=True)



        elif decision == 6:
            print("Terminando la aplicacion")
            sys.exit()

system()
